// Prisma schema aligned with server/ARCHITECTURE.md
// Datasource and generator

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Workspace-scoped Text entity mirroring SQL migration
model Text {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  workspace_id String   @db.VarChar(64)
  title        String   @db.VarChar(200)
  content      String   @db.Text
  created_by   String   @db.VarChar(128)
  created_at   DateTime @default(now()) @db.Timestamptz(6)
  updated_at   DateTime @default(now()) @db.Timestamptz(6)

  @@index([workspace_id], name: "idx_texts_workspace")
  @@index([workspace_id, created_at], name: "idx_texts_workspace_created_at")
  @@map("texts")
}

// Workspace-scoped Comment entity
model Comment {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  workspace_id String   @db.VarChar(64)
  text         String   @db.Text
  author_id    String   @db.VarChar(128)
  created_at   DateTime @default(now()) @db.Timestamptz(6)

  @@index([workspace_id], name: "idx_comments_workspace")
  @@index([workspace_id, created_at], name: "idx_comments_workspace_created_at")
  @@map("comments")
}

// ===================== TARGET DOMAIN MODELS (ARCHITECTURE) =====================

model Workspace {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name      String   @db.VarChar(50)
  color     String   @db.VarChar(7)
  owner_id  String

  // Relations intentionally not enforced in Prisma (soft design)

  @@map("workspaces")
}

model WorkspaceMember {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  workspace_id String   @db.VarChar(64)
  user_id      String
  role         String   @db.VarChar(16) // admin/editor

  @@index([workspace_id])
  @@map("workspace_members")
}

model OAuthToken {
  id            String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  workspace_id  String   @db.VarChar(64)
  provider      String   @db.VarChar(32) // instagram/facebook/google...
  access_token  String   @db.Text
  refresh_token String?  @db.Text
  expires_at    DateTime?

  @@index([workspace_id])
  @@map("oauth_tokens")
}

model CustomAgent {
  id            String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  workspace_id  String   @db.VarChar(64)
  name          String
  type          String   @db.VarChar(16) // SAV/SALES
  description   String?  @db.Text
  created_at    DateTime @default(now()) @db.Timestamptz(6)
  updated_at    DateTime @default(now()) @db.Timestamptz(6)

  @@index([workspace_id])
  @@map("custom_agents")
}

model WorkspaceDocument {
  id            String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  workspace_id  String   @db.VarChar(64)
  type          String   @db.VarChar(16) // info/url/file/image
  name          String?
  description   String?
  url           String?
  corpus_document_id String?
  created_at    DateTime @default(now()) @db.Timestamptz(6)

  @@index([workspace_id])
  @@map("workspace_documents")
}

model WorkspaceAutomation {
  id            String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  workspace_id  String   @db.VarChar(64)
  provider      String   @db.VarChar(32) // meta/google...
  name          String   @db.VarChar(64) // messages/comments...
  config        String   @db.Text        // JSON serialized
  created_at    DateTime @default(now()) @db.Timestamptz(6)

  @@index([workspace_id])
  @@map("workspace_automations")
}

model Campaign {
  id            String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  workspace_id  String   @db.VarChar(64)
  title         String
  status        String   @db.VarChar(16) // Draft/Published
  created_at    DateTime @default(now()) @db.Timestamptz(6)
  updated_at    DateTime @default(now()) @db.Timestamptz(6)

  @@index([workspace_id])
  @@map("campaigns")
}


